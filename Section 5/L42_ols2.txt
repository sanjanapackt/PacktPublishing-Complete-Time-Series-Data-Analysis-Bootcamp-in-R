setwd("F:\\Forecasting_R\\Bike-Sharing-Dataset")

library(tidyquant)
library(timetk)
library(broom)

# Read data
bikes = read_csv("day.csv")
head(bikes)

# Select date and count
bikes = bikes %>%
  select(dteday, cnt) %>%
  rename(date = dteday)

bikes %>%
  ggplot(aes(x = date, y = cnt)) +
  geom_rect(xmin = as.numeric(ymd("2012-07-01")),
            xmax = as.numeric(ymd("2013-01-01")),
            ymin = 0, ymax = 10000,
            fill = palette_light()[[4]], alpha = 0.01) +
  annotate("text", x = ymd("2011-10-01"), y = 7800,
           color = palette_light()[[1]], label = "Train Region") +
  annotate("text", x = ymd("2012-10-01"), y = 1550,
           color = palette_light()[[1]], label = "Test Region") +
  geom_point(alpha = 0.5, color = palette_light()[[1]]) +
  labs(title = "Bikes Sharing Dataset: Daily Scale", x = "") +
  theme_tq()

# Split into training and test sets
train = bikes %>%
  filter(date < ymd("2012-07-01"))

test = bikes %>%
  filter(date >= ymd("2012-07-01"))

# Add time series signature
train_augmented = train %>% tk_augment_timeseries_signature()
train_augmented

# Model cnt using the augmented time features
fit_lm = lm(cnt ~ ., data = train_augmented)
summary(fit_lm)

# Visualize the residuals of training set
fit_lm %>%
  augment() %>%
  ggplot(aes(x = date, y = .resid)) +
  geom_hline(yintercept = 0, color = "red") +
  geom_point(color = palette_light()[[1]], alpha = 0.5) +
  theme_tq() +
  labs(title = "Training Set: lm() Model Residuals", x = "") +
  scale_y_continuous(limits = c(-5000, 5000))

## Randomly distributed residuals needed

##test how the model performs on unseen data
test_augmented = test %>%
  tk_augment_timeseries_signature()

test_augmented

yhat_test = predict(fit_lm, newdata = test_augmented)
##predicted bike rides

pred_test = test %>%
  add_column(yhat = yhat_test) %>%
  mutate(.resid = cnt - yhat)
pred_test


## How to the predicted values compare 
ggplot(aes(x = date), data = bikes) +
  geom_rect(xmin = as.numeric(ymd("2012-07-01")),
            xmax = as.numeric(ymd("2013-01-01")),
            ymin = 0, ymax = 10000,
            fill = palette_light()[[4]], alpha = 0.01) +
  annotate("text", x = ymd("2011-10-01"), y = 7800,
           color = palette_light()[[1]], label = "Train Region") +
  annotate("text", x = ymd("2012-10-01"), y = 1550,
           color = palette_light()[[1]], label = "Test Region") + 
  geom_point(aes(x = date, y = cnt), data = train, alpha = 0.5, color = palette_light()[[1]]) +
  geom_point(aes(x = date, y = cnt), data = pred_test, alpha = 0.5, color = palette_light()[[1]]) +
  geom_point(aes(x = date, y = yhat), data = pred_test, alpha = 0.5, color = palette_light()[[2]]) +
  theme_tq() 


# Calculating forecast error
error_tbl = pred_test %>%
  mutate(pct_err = .resid/cnt * 100) %>%
  summarize(
    me = mean(.resid, na.rm = TRUE),
    rmse = mean(.resid^2, na.rm = TRUE)^0.5,
    mae = mean(abs(.resid), na.rm = TRUE),
    mape = mean(abs(pct_err), na.rm = TRUE),
    mpe = mean(pct_err, na.rm = TRUE)
  )

error_tbl


ggplot(aes(x = date, y = .resid), data = pred_test) +
  geom_hline(yintercept = 0, color = "red") +
  geom_point(color = palette_light()[[1]], alpha = 0.5) +
  geom_smooth() +
  theme_tq() +
  labs(title = "Test Set: lm() Model Residuals", x = "") +
  scale_y_continuous(limits = c(-5000, 5000))

##test model residuals are not normally distrbuted
## try tweaking features using interactions or polynomial terms, 

