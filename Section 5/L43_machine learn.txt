########### Select the Best Regression Model

library(tidyquant)
library(h2o)

# Beer, Wine, Distilled Alcoholic Beverages, in Millions
beer_sales_tbl =tq_get("S4248SM144NCEN", get = "economic.data", from = "2010-01-01", to = "2017-10-27")
beer_sales_tbl

# Plot Beer Sales with train, validation, and test sets shown
beer_sales_tbl %>%  
  ggplot(aes(date, price)) +annotate("text", x = ymd("2012-01-01"), y = 7000,color = palette_light()[[1]], label = "Train Region") +
  geom_rect(xmin = as.numeric(ymd("2016-01-01")), xmax = as.numeric(ymd("2016-12-31")),ymin = 0, ymax = Inf, alpha = 0.02,              
  fill = palette_light()[[3]]) +annotate("text", x = ymd("2016-07-01"), y = 7000,             
  color = palette_light()[[1]], label = "Validation\nRegion") + 
  geom_rect(xmin = as.numeric(ymd("2017-01-01")),
  xmax = as.numeric(ymd("2017-08-31")), ymin = 0, ymax = Inf, alpha = 0.02,
  fill = palette_light()[[4]]) +annotate("text", x = ymd("2017-05-01"), y = 7000, 
  color = palette_light()[[1]], label = "Test\nRegion") + 
  geom_line(col = palette_light()[1]) +geom_point(col = palette_light()[1]) + geom_ma(ma_fun = SMA, n = 12, size = 1) + 
  scale_x_date(date_breaks = "1 year", date_labels = "%Y") +    labs(title = "Beer Sales: 2007 through 2017",         subtitle = "Train, Validation, and Test Sets Shown") 


#Augment Time Series Signature
beer_sales_tbl_aug = beer_sales_tbl %>%
  tk_augment_timeseries_signature()

beer_sales_tbl_aug

beer_sales_tbl_clean = beer_sales_tbl_aug %>% 
  select_if(~ !is.Date(.)) %>%    
  select_if(~ !any(is.na(.))) %>%    
  mutate_if(is.ordered, ~ as.character(.) %>% as.factor)

beer_sales_tbl_clean %>% glimpse()

# Split into training, validation and test sets
train_tbl = beer_sales_tbl_clean %>% filter(year < 2016)
valid_tbl = beer_sales_tbl_clean %>% filter(year == 2016)
test_tbl  = beer_sales_tbl_clean %>% filter(year == 2017)

h2o.init()        # Fire up h2o

##hex
train_h2o = as.h2o(train_tbl)
valid_h2o = as.h2o(valid_tbl)
test_h2o  = as.h2o(test_tbl)

y = "price"
x = setdiff(names(train_h2o), y)

##select the best possible regression model
## out of OLS, RF, SVM, GBM 
automl_models_h2o = h2o.automl(x = x, y = y,
                               training_frame = train_h2o,
                               validation_frame = valid_h2o,     
                               leaderboard_frame = test_h2o,     
                               max_runtime_secs = 60,     
                               stopping_metric = "deviance")

automl_leader = automl_models_h2o@leader
automl_leader

##since the models has been validated, we predict 
pred_h2o = h2o.predict(automl_leader, newdata = test_h2o)

h2o.performance(automl_leader, newdata = test_h2o)

head(pred_h2o)
